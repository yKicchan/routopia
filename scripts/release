#!/bin/bash

# Exit early
# See: https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#The-Set-Builtin
set -e

# About:
#
# This is a helper script to tag and push a new release. GitHub Actions use
# release tags to allow users to select a specific version of the action to use.
#
# See: https://github.com/actions/typescript-action#publishing-a-new-release
# See: https://github.com/actions/toolkit/blob/master/docs/action-versioning.md#recommendations

# Variables
semver_tag_regex='v[0-9]+\.[0-9]+\.[0-9]+$'
semver_tag_glob='v[0-9].[0-9].[0-9]*'
git_remote='origin'
git_base_branch='main'
major_semver_tag_regex='\(v[0-9]*\)'
minor_semver_tag_regex='\(v[0-9]*\.[0-9]*\)'

# Terminal colors
OFF='\033[0m'
BOLD_RED='\033[1;31m'
BOLD_GREEN='\033[1;32m'
BOLD_BLUE='\033[1;34m'
BOLD_PURPLE='\033[1;35m'
GRAY='\x1b[90m'

# 1. Retrieve the latest release tag
echo -e "${GRAY}[debug] 1. Retrieve the latest release tag${OFF}"
latest_tag_commit=$(git rev-list --tags --max-count=1)
if ! latest_tag=$(git describe --tags --match="$semver_tag_glob" "$latest_tag_commit"); then
	# There are no existing release tags
	echo -e "No tags found (yet) - Continue to create and push your first tag"
	latest_tag="[unknown]"
fi
echo -e "The latest release tag is: ${BOLD_BLUE}${latest_tag}${OFF}"

# 2. Prompt the user for a new release tag
echo -e "${GRAY}[debug] 2. Prompt the user for a new release tag${OFF}"
read -r -p 'Enter a new release tag (vX.X.X format): ' new_tag

# 3. Validate the new release tag
echo -e "${GRAY}[debug] 3. Validate the new release tag${OFF}"
if git rev-parse --verify --quiet "$new_tag" > /dev/null; then
    # The tag already exists
    echo -e "${BOLD_RED}Error: Tag '${BOLD_PURPLE}$new_tag${BOLD_RED}' already exists. Please choose a different tag.${OFF}"
    exit 1
fi
if echo "$new_tag" | grep -q -E "$semver_tag_regex"; then
	# Release tag is valid
	echo -e "Tag: ${BOLD_BLUE}$new_tag${OFF} is valid syntax"
else
	# Release tag is not in `vX.X.X` format
	echo -e "Tag: ${BOLD_BLUE}$new_tag${OFF} is ${BOLD_RED}not valid${OFF} (must be in ${BOLD}vX.X.X${OFF} format)"
	exit 1
fi

# 4. Check updated the version field in package.json
echo -e "${GRAY}[debug] 4. Check updated the version field in package.json${OFF}"
prev_branch=$(git rev-parse --abbrev-ref HEAD)
git switch "$git_base_branch" > /dev/null
package_version=$(cat package.json | jq -r '.version')
new_version=$(echo "$new_tag" | cut -d "v" -f 2)

if [[ ! ("$package_version" == "$new_version") ]]; then
	# Package.json version field is not up to date
	echo -e "${BOLD_RED}Please update the package.json version to ${BOLD_PURPLE}$new_version${BOLD_RED} and commit your changes${OFF}"
	git switch "$prev_branch"
	exit 1
fi

# 5. Build the project & Commit dist folder
echo -e "${GRAY}[debug] 5. Build the project & Commit dist folder${OFF}"
release_branch="releases/$new_tag"
git switch -c "$release_branch" "$git_base_branch" > /dev/null
if ! npm run build > /dev/null; then
    echo -e "${BOLD_RED}Build failed. Aborting release process.${OFF}"
    git switch "$prev_branch" > /dev/null
    exit 1
fi
sed -i.bak '/dist\//d' .gitignore && rm .gitignore.bak
git add .gitignore
git add dist
git commit -m "release: $new_tag" > /dev/null

# 6. Tag a new release
echo -e "${GRAY}[debug] 6. Tag a new release${OFF}"
git tag "$new_tag" --annotate --message "$new_tag Release"
echo -e "Tagged: ${BOLD_GREEN}$new_tag${OFF}"

# 7. Point separate version release tag (e.g. v1, v1.1) to the new release
echo -e "${GRAY}[debug] 7. Point separate version release tag (e.g. v1, v1.1) to the new release${OFF}"
latest_major_release_tag=$(expr "$latest_tag" : "$major_semver_tag_regex")
new_major_release_tag=$(expr "$new_tag" : "$major_semver_tag_regex")
latest_minor_release_tag=$(expr "$latest_tag" : "$minor_semver_tag_regex")
new_minor_release_tag=$(expr "$new_tag" : "$minor_semver_tag_regex")

if ! [[ "$new_minor_release_tag" = "$latest_minor_release_tag" ]]; then
  is_minor_release='yes'
else
  is_minor_release='no'
fi

if ! [[ "$new_major_release_tag" = "$latest_major_release_tag" ]]; then
	is_major_release='yes'
else
	is_major_release='no'
fi

if [ $is_minor_release = 'yes' ]; then
  # Create a new minor version tag and point it to this release
  git tag "$new_minor_release_tag" --annotate --message "$new_minor_release_tag Release"
  echo -e "New minor version tag: ${BOLD_GREEN}$new_minor_release_tag${OFF}"
else
  # Update the minor version tag to point it to this release
  git tag "$latest_minor_release_tag" --force --annotate --message "Sync $latest_minor_release_tag tag with $new_tag"
  echo -e "Synced ${BOLD_GREEN}$latest_minor_release_tag${OFF} with ${BOLD_GREEN}$new_tag${OFF}"
fi

if [ $is_major_release = 'yes' ]; then
	# Create a new major version tag and point it to this release
	git tag "$new_major_release_tag" --annotate --message "$new_major_release_tag Release"
	echo -e "New major version tag: ${BOLD_GREEN}$new_major_release_tag${OFF}"
else
	# Update the major version tag to point it to this release
	git tag "$latest_major_release_tag" --force --annotate --message "Sync $latest_major_release_tag tag with $new_tag"
	echo -e "Synced ${BOLD_GREEN}$latest_major_release_tag${OFF} with ${BOLD_GREEN}$new_tag${OFF}"
fi

# 8. Push the new tags to remote
echo -e "${GRAY}[debug] 8. Push the new tags to remote${OFF}"
git push $git_remote "$new_tag"
git push -f $git_remote "$new_minor_release_tag"
git push -f $git_remote "$new_major_release_tag"
echo -e "Tags: ${BOLD_GREEN}$new_tag${OFF}, ${BOLD_GREEN}$new_minor_release_tag${OFF}, ${BOLD_GREEN}$new_major_release_tag${OFF} pushed to remote"

# Completed
git switch "$prev_branch" > /dev/null
git branch -D "$release_branch"
echo -e "${BOLD_GREEN}Done!${OFF}"
